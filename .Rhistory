}
human_genomes <- DiagrammeR::grViz("humangenomes {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a
b
c
a => b
b => c
}
")
human_genomes
#| label: fig-shockalgorithm
#| fig-cap: "Approach to Shock"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Shock']
b [label = 'Cold, clammy extremities']
c [label = 'Warm, bounding pulse']
d [label = 'Low cardiac output']
e [label = 'JVP Increased, crackles']
f [label = 'JVP decrease, orthostasis']
g [label = 'Heart is full/cardiogenic shock']
h [label = 'Evaluate for MI']
i [label = 'Consider Echo, invasive monitoring']
j [label = 'Inotropes, afterload reduction']
k [label = 'High Cardiac Output']
l [label = 'Septic shock, liver failure']
m [label = 'Antibiotics, aggresive resuscitation']
n [label = 'Heart is Empty/Hypovolemic shock']
o [label = 'IV fluids']
p [label = 'no improvement??']
q [label = 'What does not fit??']
r [label = 'Adrenal crisis, right heart syndrome, pericardial disease']
s [label = 'Consider echo, invasive monitoring']
t [label = 'May convert to']
a -> b
a -> c
b -> d
d -> e
d -> f
e -> g
g -> h
h -> i
i -> j
c -> k
k -> l
l -> m
f -> n
n -> o
o -> p
p -> q
q -> r
r -> s
o -> t
t -> k
}")
#| label: fig-shockalgorithm
#| fig-cap: "Approach to Shock"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Shock']
b [label = 'Cold, clammy extremities']
c [label = 'Warm, bounding pulse']
a -> b
a -> c
}")
DiagrammeR::grViz("genomes {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear']
c [label = 'Mitochondria']
a -> b
a -> c
}")
#| label: fig-genomes
#| fig-cap: "Human Genomes"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("genomes {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear']
c [label = 'Mitochondria']
a -> b
a -> c
}")
#| label: fig-genomes
#| fig-cap: "Human Genomes"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear']
c [label = 'Mitochondria']
a -> b
a -> c
}")
#| label: fig-genomes
#| fig-cap: "Human Genomes"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear']
c [label = 'Mitochondria']
a -> {b c}
}")
#| label: fig-genomes
#| fig-cap: "Human Genomes"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear Genomes']
c [label = 'Mitochondria Genomes']
d [label = 'Genes and gene related DNA']
e [label = 'Extragenic DNA']
f [label = '2 rRNA']
g [label = '22 tRNA']
h [label = '13 Polypeptide encoding genes']
i [label = 'Coding and Regulatory DNA']
j [label = 'Non-coding DNA']
k [label = 'Unique Low copy number DNA']
l [label = 'Repetitive DNA']
m [label = 'Pseudogene']
n [label = 'Gene fragments']
o [label = 'Introns, untranslated sequences']
p [label = 'Interspersed repeats']
q [label = 'tandem repeats']
a -> {b c}
b -> {d e}
d -> {i j}
j -> {m n o}
}")
#| label: fig-genomes
#| fig-cap: "Human Genomes"
#| fig-cap-location: bottom
#| fig-align: center
#| fig-width: 4
DiagrammeR::grViz("digraph {
graph[layout = dot, rankdir = TB, fontsize = 10]
node[shape = rectangle]
a [label = 'Human Genomes']
b [label = 'Nuclear Genomes']
c [label = 'Mitochondria Genomes']
d [label = 'Genes and gene related DNA']
e [label = 'Extragenic DNA']
f [label = '2 rRNA']
g [label = '22 tRNA']
h [label = '13 Polypeptide encoding genes']
i [label = 'Coding and Regulatory DNA']
j [label = 'Non-coding DNA']
k [label = 'Unique Low copy number DNA']
l [label = 'Repetitive DNA']
m [label = 'Pseudogene']
n [label = 'Gene fragments']
o [label = 'Introns, untranslated sequences']
p [label = 'Interspersed repeats']
q [label = 'tandem repeats']
a -> {b c}
b -> {d e}
d -> {i j}
j -> {m n o}
c -> {f g h}
e -> {k l}
l -> {p q}
}")
var_ind <- c("kontinyu (normal)", "kontinyu(non-normal)")
var_dep <- c("kontinyu(normal)", "kontinyu (non-normal)")
ana_biv <- c("korelasi pearson(rho) ; regresi linier sederhana (slope, intercept)", "korelasi speramn (rho)")
ana_mul <- c("korelasi pearson partial / regresi linier berganda", "korelasi spearman parsial")
stat_biv <- data.frame(var_ind, var_dep, ana_biv, ana_mul)
stat_biv
table(stat_biv)
gt(stat_biv)
library(gt)
var_ind <- c("kontinyu (normal)", "kontinyu(non-normal)")
var_dep <- c("kontinyu(normal)", "kontinyu (non-normal)")
ana_biv <- c("korelasi pearson(rho) ; regresi linier sederhana (slope, intercept)", "korelasi speramn (rho)")
ana_mul <- c("korelasi pearson partial / regresi linier berganda", "korelasi spearman parsial")
stat_biv <- data.frame(var_ind, var_dep, ana_biv, ana_mul)
gt(stat_biv)
$\mu$
install.packages("magick")
install.packages("magick", "tesseract")
install.packages(tesseract")
a
d
""
install.packages("tesseract")
install.packages("tesseract")
install.packages("tesseract")
install.packages("tesseract")
worms <- read.csv("mock_data/worms.csv")
names(worms)
summary(worms)
with(worms, tapply(worm.density, vegetation, mean))
with(worms, tapply(worm.density, Vegetation, mean))
with(worms, tapply(Worm.density, Vegetation, mean))
aggregate(worms[,c(2,3,5,7)], list(Vegetation), mean)
aggregate(worms[,c(2,3,5,7)], list(worms$Vegetation), mean)
aggregate(worms[,c(2,3,5,7)], list(Community = worms$Vegetation), mean)
list(Community = worms$Vegetation)
aggregate(worms[,c(2,3,5,7)],
list(moisture = worms$Damp,
community = worms$Vegetation),
mean
)
das <- read.csv("das.csv")
das <- read.csv("mack_data/das.csv")
das <- read.csv("mock_data/das.csv")
plot(das$y)
which(das$y > 10)
scat <- read.csv("mock_data/scatter.csv")
plot(scat$x, scat$y, pch=21, bg="red")
plot(factor(weather$month), upper)
weather <- read.csv("mock_data/weather.data.csv")
plot(factor(weather$month), upper)
weather <- read.csv("mock_data/weather.data.csv")
plot(factor(weather$month), weather$upper)
coplot <- read.csv("mock_data/coplot.csv")
par(mfrow=c(1,2))
plot(scatter$x, scatter$y)
coplot <- read.csv("mock_data/coplot.csv")
windows(7,4)
windows(7,4)
coplot <- read.csv("mock_data/coplot.csv")
coplot <- read.csv("mock_data/coplot.csv")
coplot <- read.csv("mock_data/coplot.csv")
window(7,4)
par(mfrow=c(1,2))
par(window(7,4))
par(windows(7,4))
x11(7,4)
par(mfrow=c(1,2))
plot(coplot$x, coplot$y)
plot(coplot$y, coplot$x)
x11(width=7, height=4)
install.packages("Cairo")
x11(width=7, height=4)
par(mfrow=c(1,2))
plot(coplot$x, coplot$y)
plot(coplot$y, coplot$x)
par(mfrow=c(1,2))
plot(coplot$x, coplot$y)
plot(coplot$y, coplot$x)
coplot(coplot$y ~ coplot$x | coplot$z, pch = 16, panel=panel.smooth)
View(coplot)
View(coplot)
np <- read.csv("mock_data/np.csv")
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
plot(np$phosporus, np$yield, main = "Phosporus")
plot(np$nitrogen, np$yield, main = "Nitrogen")
levels(np$nitrogen)
np <- read.csv("mock_data/np.csv")
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
levels(np$nitrogen)
View(np)
View(np)
np <- as.factor(np[c(1,2)])
np <- as.factor(np$nitrogen)
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
np$nitrogen
np <- read.csv("mock_data/np.csv")
np <- read.csv("mock_data/np.csv")
np$nitrogen
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
#par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
np <- read.csv("mock_data/np.csv")
attach(np)
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
levels(np$nitrogen)
np$nitrogen <- as.factor(np$nitrogen)
np <- read.csv("mock_data/np.csv")
np$nitrogen <- as.factor(np$nitrogen)
np$phosporus <- as.factor(np$phosporus)
np <- read.csv("mock_data/np.csv")
np$nitrogen <- as.factor(np$nitrogen)
np$phosporus <- as.factor(np$phosporus)
plot(np$nitrogen, np$yield, main = "Nitrogen")
np$phosporus <- as.factor(np$phosporus)
as.factor(np$phosphorus)
np$phosporus <- as.factor(np$phosphorus)
np <- read.csv("mock_data/np.csv")
np$nitrogen <- as.factor(np$nitrogen)
np$phosporus <- as.factor(np$phosphorus)
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
plot(np$phosporus, np$yield, main = "Phosporus")
plot(rnorm(mean = 0, sd = 1))
plot(rnorm(n= 1000, mean = 0, sd = 1))
plot(x = seq(1:1000), y = rnorm(n= 1000, mean = 0, sd = 1))
hist(rnorm(n= 1000, mean = 0, sd = 1))
# Data
perlakuan <- c(0.43, 0.43, 0.42, 0.42, 0.42, 0.42, 0.42, 0.43, 0.42, 0.43, 0.43, 0.43, 0.43, 0.41, 0.42, 0.42)
kontrol <- c(0.39)
shapiro.test(perlakuan)
ks.test(perlakuan)
ks.test(x = perlakuan, y = "pnorm")
ks.test(x = perlakuan, y = pnorm)
ks.test(x = perlakuan, y = 'pnorm')
perlakuan <- c(0.43, 0.43, 0.42, 0.42, 0.42, 0.42, 0.42, 0.43, 0.42, 0.43, 0.43, 0.43, 0.43, 0.41, 0.42, 0.42)
#kontrol <- c(0.39)
shapiro.test(perlakuan)
ks.test(x = perlakuan, y = 'pnorm')
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
# Statistics and R languange
## Dataframe Operation
```{r}
# Statistics and R languange
## Dataframe Operation
```{r}
worms <- read.csv("mock_data/worms.csv")
names(worms)
summary(worms)
with(worms, tapply(Worm.density, Vegetation, mean))
aggregate(worms[,c(2,3,5,7)], list(Community = worms$Vegetation), mean)
aggregate(worms[,c(2,3,5,7)],
list(moisture = worms$Damp,
community = worms$Vegetation),
mean
)
das <- read.csv("mock_data/das.csv")
plot(das$y)
which(das$y > 10)
scat <- read.csv("mock_data/scatter.csv")
plot(scat$x, scat$y, pch=21, bg="red")
weather <- read.csv("mock_data/weather.data.csv")
plot(factor(weather$month), weather$upper)
coplot <- read.csv("mock_data/coplot.csv")
par(mfrow=c(1,2))
plot(coplot$x, coplot$y)
plot(coplot$y, coplot$x)
coplot(coplot$y ~ coplot$x | coplot$z, pch = 16, panel=panel.smooth)
np <- read.csv("mock_data/np.csv")
np$nitrogen <- as.factor(np$nitrogen)
np$phosporus <- as.factor(np$phosphorus)
par(mfrow=c(1,2))
plot(np$nitrogen, np$yield, main = "Nitrogen")
plot(np$phosporus, np$yield, main = "Phosporus")
tapply(np$yield, list(np$nitrogen, np$phosporus), mean)
tapply(np$yield, list(np$nitrogen, np$phosporus), mean)
barplot(tapply(np$yield, list(np$nitrogen, np$phosporus), mean),
beside = TRUE,
xlab = "phosporus")
barplot(tapply(np$yield, list(np$nitrogen, np$phosporus), mean),
beside = TRUE,
xlab = "phosporus")
legend(locator(1), legend = c("no", "yes"), title = "Nitrogen", fill = c("black", "lightgrey"))
barplot(tapply(np$yield, list(np$nitrogen, np$phosporus), mean),
beside = TRUE,
xlab = "phosporus")
legend(legend = c("no", "yes"), title = "Nitrogen", fill = c("black", "lightgrey"))
barplot(tapply(np$yield, list(np$nitrogen, np$phosporus), mean),
beside = TRUE,
xlab = "phosporus")
legend("topleft", legend = c("no", "yes"), title = "Nitrogen", fill = c("black", "lightgrey"))
x <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(y, ylim=c(0,20)
plot(y, ylim=c(0,20))
plot(x, ylim=c(0,20))
plot(1:11, y, ylim-c(0,20), pch=16, col="blue")
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim-c(0,20), pch=16, col="blue")
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,4.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,4.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
y <- c(13,7,5,12,9,15,6,11,9,7,12)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
lines(c(4.5,4.5), c(5,15), col="brown")
lines(c(4.5,3.5), c(5,5), col="brown", lty=2)
lines(c(4.5,5.5), c(15,15), col="brown", lty=2)
range(y)
plot(1:11, y, ylim=c(0,20), pch=16, col="blue")
abline(h=mean(y), col="green")
for(i in 1:11) lines(c(i,i), c(mean(y), y[i]), col="red")
compensation <- read.csv("mock_data/ipomopsis.csv")
com <- read.csv("mock_data/ipomopsis.csv")
names(com)
plot(com$Root, com$Fruit, pch=16, col="darkblue")
plot(com$Grazing, com$Fruit, col="lightgreen")
plot(com$Grazing, com$Fruit, col="lightgreen")
str(com)
com$Grazing <- as.factor(com$Grazing)
plot(com$Grazing, com$Fruit, col="lightgreen")
summary(aov(com$Fruit ~ com$Grazing))
model1 <- lm(com$Fruit ~ com$Root*com$Grazing)
summary.aov(model1)
model1b <- lm(com$Fruit ~ com$Grazing*com$Root)
summary.aov(model1b)
model1a <- lm(com$Fruit ~ com$Root*com$Grazing)
summary.aov(model1a)
model1b <- lm(com$Fruit ~ com$Grazing*com$Root)
summary.aov(model1b)
model2 <- lm(com$Fruit ~ com$Grazing + com$Root)
summary.aov(model2)
anova(model1a, model2)
anova(model1b, model2)
summary.lm(model2)
levels(com$Grazing)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("topleft",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
legend("top",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("top",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("topleft",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("bottomleft",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("bottomright",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("bottomright",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
abline(-127.829, 23.56, col=2)
plot(com$Root, com$Fruit, pch=21, bg=(1+as.numeric(com$Grazing)))
legend("bottomright",
c("Grazed", "Ungrazed"),
col = c(2,3),
pch = 16)
abline(-127.829, 23.56, col=2)
abline(-127.829 + 36.103, 23.56, col=3)
tapply(com$Fruit, com$Grazing, mean)
plot(com$Grazing, com$Fruit, col="lightgreen")
tapply(com$Fruit, com$Grazing, mean)
install.packages("survival")
install.packages("epiR")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("epiR")
install.packages(c("askpass", "bbotk", "bibliometrix", "bookdown", "Cairo", "checkmate", "clue", "cpp11", "crosstalk", "curl", "datawizard", "dbplyr", "DEoptimR", "DescTools", "diptest", "dplyr", "DT", "easystats", "effectsize", "emmeans", "epiR", "evaluate", "expm", "FactoMineR", "fansi", "flextable", "gdtools", "ggplot2", "ggrepel", "gt", "gtable", "gtExtras", "gtools", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httr", "insight", "labeling", "learnr", "linelist", "lubridate", "magick", "markdown", "Matrix", "MatrixModels", "matrixStats", "mclust", "metafor", "minqa", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "mlr3viz", "mvtnorm", "officer", "openssl", "packrat", "parameters", "pdftools", "performance", "pkgload", "plotly", "plyr", "prabclus", "prettyunits", "qrcode", "quantreg", "quarto", "R.utils", "ragg", "RcppEigen", "RCurl", "reactR", "rematch", "renv", "rio", "rmarkdown", "robustbase", "rootSolve", "rprojroot", "rsconnect", "RSQLite", "scales", "see", "stringdist", "systemfonts", "tesseract", "testthat", "textshaping", "tinytex", "units", "utf8", "uuid", "vctrs", "vroom", "waldo", "withr", "wk", "XML"))
